cmake_minimum_required(VERSION 2.8.2)

# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
    RESULT_VARIABLE result
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/googletest-download" )
if(result)
    message(FATAL_ERROR "CMake step for googletest failed: ${result}")
endif()
execute_process(COMMAND "${CMAKE_COMMAND}" --build .
    RESULT_VARIABLE result
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/googletest-download" )
if(result)
    message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif()

# Prevent overriding the parent project's compiler/linker
# settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines
# the gtest and gtest_main targets.
add_subdirectory("${CMAKE_CURRENT_BINARY_DIR}/googletest-src"
                 "${CMAKE_CURRENT_BINARY_DIR}/googletest-build")

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
if (CMAKE_VERSION VERSION_LESS 2.8.11)
  include_directories("${gtest_SOURCE_DIR}/include")
endif()

# Add test executables
set(TEST_CPPLIB_LIST
    TestArrayStack
    # TestArrayDeque
    # TestLinkedDeque
    # TestBinaryHeap
    # TestIndexHeap
    # TestArrayList
    # TestLinkedList
    # TestPriorityQueue
    # TestArrayQueue
    # TestLinkedQueue
    # TestRandom
    # TestBinarySearchMap
    # TestBinarySearchSet
    # TestBinarySearchTreeMap
    # TestLinearProbingHashMap
    # TestRedBlackTreeMap
    # TestSeperateChainingHashMap
    # TestSequentialSearchMap
    # TestBubbleSort
    # TestHeapSort
    # TestInsertionSort
    # TestMergeSort
    # TestQuick3WaySort
    # TestQuickSort
    # TestSelectionSort
    # TestShellSort
    # TestLinkedStack
    # TestTimer
    # TestQuickFind
    # TestQuickUnion
    # TestUnionFind
    # TestWeightedUnion
    )


message(STATUS "EXECUTABLE_OUTPUT_PATH: ${EXECUTABLE_OUTPUT_PATH}")
# Link against gtest or gtest_main as needed.
foreach (test ${TEST_CPPLIB_LIST})
    add_executable(${test} ${test}.cpp ${CPPLIB_HEADERS})
    target_link_libraries(${test} gtest_main)
    add_test(${test} ${EXECUTABLE_OUTPUT_PATH}/${test})
endforeach ()